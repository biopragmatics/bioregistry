# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
isolated_build = true
envlist =
    # always keep coverage-clean first
    #coverage-clean
    # code linters/stylers
    manifest
    lint
    flake8
    pyroma
    mypy
    # documentation linters/checkers
    doc8
    docstr-coverage
    docs
    # the actual tests
    py-pydantic1
    py-pydantic2
    doctests
    # always keep coverage-report last
    #coverage-report

[testenv]
commands =
    coverage run -p -m pytest --durations=20 {posargs:tests}
    coverage combine
    coverage xml
deps =
    pydantic1: pydantic<2.0
    pydantic2: pydantic>=2.0
passenv =
    HOME
extras =
    tests
    align
    export
    web
allowlist_externals =
    cat
    cp
    mkdir
    git

[testenv:update]
description = Update the Bioregistry
commands =
    python -m bioregistry update
usedevelop = true
extras =
    align
    export
    charts
    ndex
passenv =
    BIOPORTAL_API_KEY
    ECOPORTAL_API_KEY
    AGROPORTAL_API_KEY
    FAIRSHARING_LOGIN
    FAIRSHARING_PASSWORD
    NDEX_USERNAME
    NDEX_PASSWORD

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:pre-commit]
skip_install = true
deps =
    pre-commit
commands = pre-commit run -a
usedevelop = true
description = Run the pre-commit tool

[testenv:flake8]
skip_install = true
deps =
    darglint
    flake8>5.0.0
    # flake8-bandit
    flake8-black
    flake8-bugbear
    flake8-colors
    flake8-docstrings
    flake8-isort
    flake8-print
    pep8-naming
    pydocstyle
commands =
    flake8 src/bioregistry/ tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:lint]
deps =
    black[jupyter]
    isort
skip_install = true
commands =
    black .
    isort .
description = Run linters.

[testenv:bioregistry-lint]
usedevelop = true
commands =
    python -m bioregistry lint
description = Lint the Bioregistry data

[testenv:mypy]
deps =
    mypy
    pydantic
    types-PyYAML
    types-Markdown
    types-tabulate
    types-requests
    types-python-dateutil
skip_install = true
commands = mypy --ignore-missing-imports src/bioregistry/
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docs]
extras =
    docs
    gha
    align
    export
    charts
    web
commands =
    python -m sphinx -W -b {posargs:html} -d docs/build/doctrees docs/source docs/build/{posargs:html}

[testenv:docs-test]
changedir = docs
extras =
    {[testenv:docs]extras}
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage src/bioregistry/ tests/ --skip-private --skip-magic
description = Run the docstr-coverage tool to check documentation coverage

[testenv:doctests]
commands =
    xdoctest -m src/bioregistry/ --quiet
deps =
    xdoctest
    pygments
extras =
    web

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

[testenv:erdantic]
usedevelop = true
deps =
    erdantic
commands =
    erdantic bioregistry.Registry bioregistry.Resource -o docs/img/datamodel_umls.svg
    erdantic bioregistry.Registry bioregistry.Resource -o docs/img/datamodel_umls.png

[testenv:schema]
usedevelop = true
deps =
    pydantic<2.0
commands =
    python -m bioregistry.schema.struct

[testenv:send-prefixcc]
usedevelop = true
commands =
    python -m bioregistry.export.prefixcc
description = Send a Bioregistry CURIE prefix/URI prefix pair to Prefix.cc via its "create" API endpoint. Note that only one request to this endpoint can be sent per day.

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bump-my-version bump {posargs}
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:bumpversion-release]
commands = bump-my-version release --tag
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:build]
skip_install = true
deps =
    uv
    setuptools
commands =
    uv build --sdist --wheel --no-build-isolation

############
# Releases #
############

# In order to make a release to PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://pypi.org/manage/account/token/
# 6. Create a file called .pypirc in the home directory if it does not already exist.
# 7. Add the following content to the .pypirc file
#
#    [distutils]
#    index-servers=
#      pypi
#      testpypi
#
#    [pypi]
#    username = __token__
#    password = <the API token you just got>
#
#    If there's already an `index-servers =` list, just make sure you add `pypi` to it.
#    More information about .pypirc can be found at https://packaging.python.org/en/latest/specifications/pypirc/

[testenv:release]
description = Release the code to PyPI so users can pip install it
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:release]deps}
    bump-my-version
commands =
    bump-my-version bump release --tag
    {[testenv:release]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git

#################
# Test Releases #
#################

# In order to test making a release to Test PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://test.pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://test.pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://test.pypi.org/manage/account/token/
# 6. Create a file called .pypirc in the home directory if it does not already exist.
# 7. Add the following content to the .pypirc file
#
#    [distutils]
#    index-servers=
#      pypi
#      testpypi
#
#    [testpypi]
#    repository = https://test.pypi.org/legacy/
#    username = __token__
#    password = <the API token you just got>
#
#    If there's already an `index-servers =` list, just make sure you add `testpypi` to it.
#    More information about .pypirc can be found at https://packaging.python.org/en/latest/specifications/pypirc/

[testenv:testrelease]
description = Release the code to the test PyPI site
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:testfinish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on Test PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:testrelease]deps}
    bump-my-version
commands =
    bump-my-version bump release --tag
    {[testenv:testrelease]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git
