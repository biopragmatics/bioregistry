{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://bioregistry.io/schema.json",
  "title": "Bioregistry JSON Schema",
  "description": "The Bioregistry JSON Schema describes the shapes of the objects in the registry, metaregistry, collections, and their other related resources",
  "definitions": {
    "Author": {
      "title": "Author",
      "description": "Metadata for an author.",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The full name of the researcher",
          "type": "string"
        },
        "orcid": {
          "title": "Open Researcher and Contributor Identifier",
          "description": "The Open Researcher and Contributor Identifier (ORCiD) provides researchers with an open, unambiguous identifier for connecting various digital assets (e.g., publications, reviews) across the semantic web. An account can be made in seconds at https://orcid.org.",
          "type": "string"
        },
        "email": {
          "title": "Email address",
          "description": "The email address specific to the researcher.",
          "type": "string"
        },
        "github": {
          "title": "GitHub handle",
          "description": "The GitHub handle enables contacting the researcher on GitHub: the *de facto* version control in the computer sciences and life sciences.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "orcid"
      ]
    },
    "Collection": {
      "title": "Collection",
      "description": "A collection of resources.",
      "type": "object",
      "properties": {
        "identifier": {
          "title": "Identifier",
          "description": "The collection's identifier",
          "pattern": "^\\d{7}$",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "The name of the collection",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "A description of the collection",
          "type": "string"
        },
        "resources": {
          "title": "Resources",
          "description": "A list of prefixes of resources appearing in the collection",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authors": {
          "title": "Authors",
          "description": "A list of authors/contributors to the collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Author"
          }
        },
        "context": {
          "title": "Context",
          "type": "string"
        }
      },
      "required": [
        "identifier",
        "name",
        "description",
        "resources",
        "authors"
      ]
    },
    "Provider": {
      "title": "Provider",
      "description": "A provider.",
      "type": "object",
      "properties": {
        "code": {
          "title": "Code",
          "description": "A locally unique code within the prefix for the provider",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "Name of the provider",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "Description of the provider",
          "type": "string"
        },
        "homepage": {
          "title": "Homepage",
          "description": "Homepage of the provider",
          "type": "string"
        },
        "uri_format": {
          "title": "URI Format",
          "description": "The URI format string, which must have at least one ``$1`` in it",
          "type": "string"
        }
      },
      "required": [
        "code",
        "name",
        "description",
        "homepage",
        "uri_format"
      ]
    },
    "Attributable": {
      "title": "Attributable",
      "description": "An upper-level metadata for a researcher.",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The full name of the researcher",
          "type": "string"
        },
        "orcid": {
          "title": "Open Researcher and Contributor Identifier",
          "description": "The Open Researcher and Contributor Identifier (ORCiD) provides researchers with an open, unambiguous identifier for connecting various digital assets (e.g., publications, reviews) across the semantic web. An account can be made in seconds at https://orcid.org.",
          "type": "string"
        },
        "email": {
          "title": "Email address",
          "description": "The email address specific to the researcher.",
          "type": "string"
        },
        "github": {
          "title": "GitHub handle",
          "description": "The GitHub handle enables contacting the researcher on GitHub: the *de facto* version control in the computer sciences and life sciences.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Resource": {
      "title": "Resource",
      "description": "Metadata about an ontology, database, or other resource.",
      "type": "object",
      "properties": {
        "prefix": {
          "title": "Prefix",
          "description": "The prefix for this resource",
          "integration_status": "required",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "The name of the resource",
          "integration_status": "required",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "A description of the resource",
          "integration_status": "required",
          "type": "string"
        },
        "pattern": {
          "title": "Pattern",
          "description": "The regular expression pattern for local unique identifiers in the resource",
          "integration_status": "required_for_new",
          "type": "string"
        },
        "uri_format": {
          "title": "URI format string",
          "description": "The URI format string, which must have at least one ``$1`` in it",
          "integration_status": "required_for_new",
          "type": "string"
        },
        "providers": {
          "title": "Providers",
          "description": "Additional, non-default providers for the resource",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "homepage": {
          "title": "Homepage",
          "description": "The URL for the homepage of the resource, preferably using HTTPS",
          "integration_status": "required",
          "type": "string"
        },
        "repository": {
          "title": "Repository",
          "description": "The URL for the repository of the resource",
          "type": "string"
        },
        "contact": {
          "title": "Contact",
          "description": "The contact email address for the resource. This must correspond to a specific person and not be a listserve nor a shared email account.",
          "integration_status": "suggested",
          "allOf": [
            {
              "$ref": "#/definitions/Attributable"
            }
          ]
        },
        "example": {
          "title": "Example",
          "description": "An example local identifier for the resource, explicitly excluding any redundant usage of the prefix in the identifier. For example, a GO identifier should only look like ``1234567`` and not like ``GO:1234567``",
          "integration_status": "required",
          "type": "string"
        },
        "example_extras": {
          "title": "Example Extras",
          "description": "Extra example identifiers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "example_decoys": {
          "title": "Example Decoys",
          "description": "Extra example identifiers that explicitly fail regex tests",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "title": "License",
          "description": "The license for the resource",
          "type": "string"
        },
        "version": {
          "title": "Version",
          "description": "The version for the resource",
          "type": "string"
        },
        "part_of": {
          "title": "Part Of",
          "description": "An annotation between this prefix and a super-prefix. For example, ``chembl.compound`` is a part of ``chembl``.",
          "type": "string"
        },
        "provides": {
          "title": "Provides",
          "description": "An annotation between this prefix and a prefix for which it is redundant. For example, ``ctd.gene`` has been given a prefix by Identifiers.org, but it actually just reuses identifies from ``ncbigene``, so ``ctd.gene`` provides ``ncbigene``.",
          "type": "string"
        },
        "download_owl": {
          "title": "OWL Download URL",
          "description": "The URL to download the resource as an ontology encoded in the OWL format. More information about this format can be found at https://www.w3.org/TR/owl2-syntax/.",
          "type": "string"
        },
        "download_obo": {
          "title": "OBO Download URL",
          "description": "The URL to download the resource as an ontology encoded in the OBO format. More information about this format can be found at https://owlcollab.github.io/oboformat/doc/obo-syntax.html.",
          "type": "string"
        },
        "download_json": {
          "title": "OBO Graph JSON Download URL",
          "description": "The URL to download the resource as an ontology encoded in the OBO Graph JSON format. More information about this format can be found at https://github.com/geneontology/obographs.",
          "type": "string"
        },
        "banana": {
          "title": "Banana",
          "description": "The `banana` is a generalization of the concept of the \"namespace embedded in local unique identifier\". Many OBO foundry ontologies use the redundant uppercased name of the ontology in the local identifier, such as the Gene Ontology, which makes the prefixes have a redundant usage as in ``GO:GO:1234567``. The `banana` tag explicitly annotates the part in the local identifier that should be stripped, if found. While the Bioregistry automatically knows how to handle all OBO Foundry ontologies' bananas because the OBO Foundry provides the \"preferredPrefix\" field, the banana can be annotated on non-OBO ontologies to more explicitly write the beginning part of the identifier that should be stripped. This allowed for solving one of the long-standing issues with the Identifiers.org resolver (e.g., for ``oma.hog``; see https://github.com/identifiers-org/identifiers-org.github.io/issues/155) as well as better annotate new entries, such as SwissMap Lipids, which have the prefix ``swisslipid`` but have the redundant information ``SLM:`` in the beginning of identifiers. Therefore, ``SLM:`` is the banana.",
          "type": "string"
        },
        "deprecated": {
          "title": "Deprecated",
          "description": "A flag denoting if this resource is deprecated. Currently, this is a blanket term that covers cases when the prefix is no longer maintained, when it has been rolled into another resource, when the website related to the resource goes down, or any other reason that it's difficult or impossible to find full metadata on the resource. If this is set to true, please add a comment explaining why. This flag will override annotations from the OLS, OBO Foundry, and others on the deprecation status, since they often disagree and are very conservative in calling dead resources.",
          "type": "boolean"
        },
        "mappings": {
          "title": "Mappings",
          "description": "A dictionary of metaprefixes (i.e., prefixes for registries) to prefixes in external registries. These also correspond to the registry-specific JSON fields in this model like ``miriam`` field.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "synonyms": {
          "title": "Synonyms",
          "description": "A list of synonyms for the prefix of this resource. These are used in normalization of prefixes and are a useful reference tool for prefixes that are written many ways. For example, ``snomedct`` has many synonyms including typos like ``SNOWMEDCT``, lexical variants like ``SNOMED_CT``, version-variants like ``SNOMEDCT_2010_1_31``, and tons of other nonsense like ``SNOMEDCTCT``.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "references": {
          "title": "References",
          "description": "A list of URLs to also see, such as publications describing the resource",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appears_in": {
          "title": "Appears In",
          "description": "A list of prefixes that use this resource for xrefs, provenance, etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "depends_on": {
          "title": "Depends On",
          "description": "A list of prefixes that use this resource depends on, e.g., ontologies that import each other.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespace_in_lui": {
          "title": "Namespace Embedded in Local Unique Identifier",
          "description": "A flag denoting if the namespace is embedded in the LUI (if this is true and it is not accompanied by a banana, assume that the banana is the prefix in all caps plus a colon, as is standard in OBO). Currently this flag is only used to override identifiers.org in the case of ``gramene.growthstage``, ``oma.hog``, and ``vario``.",
          "type": "boolean"
        },
        "no_own_terms": {
          "title": "No Own Terms",
          "description": "A flag denoting if the resource mints its own identifiers. Omission or explicit marking as false means that the resource does have its own terms. This is most applicable to ontologies, specifically application ontologies, which only reuse terms from others. One example is ChIRO.",
          "type": "boolean"
        },
        "comment": {
          "title": "Comment",
          "description": "A field for a free text comment",
          "type": "string"
        },
        "contributor": {
          "title": "Contributor",
          "description": "The contributor of the prefix to the Bioregistry, including at a minimum their name and ORCiD and optionall their email address and GitHub handle. All entries curated through the Bioregistry GitHub Workflow must contain this field.",
          "integration_status": "required_for_new",
          "allOf": [
            {
              "$ref": "#/definitions/Author"
            }
          ]
        },
        "contributor_extras": {
          "title": "Contributor Extras",
          "description": "Additional contributors besides the original submitter.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Author"
          }
        },
        "reviewer": {
          "title": "Reviewer",
          "description": "The reviewer of the prefix to the Bioregistry, including at a minimum their name and ORCiD and optionall their email address and GitHub handle. All entries curated through the Bioregistry GitHub Workflow should contain this field pointing to the person who reviewed it on GitHub.",
          "integration_status": "required_for_new",
          "allOf": [
            {
              "$ref": "#/definitions/Author"
            }
          ]
        },
        "proprietary": {
          "title": "Proprietary",
          "description": "A flag to denote if this database is proprietary and therefore can not be included in normal quality control checks nor can it be resolved. Omission or explicit marking as false means that the resource is not proprietary.",
          "type": "boolean"
        },
        "has_canonical": {
          "title": "Has Canonical",
          "description": "If this shares an IRI with another entry, maps to which should be be considered as canonical",
          "type": "string"
        },
        "preferred_prefix": {
          "title": "Preferred Prefix",
          "description": "An annotation of stylization of the prefix. This appears in OBO ontologies like FBbt as well as databases like NCBIGene. If it's not given, then assume that the normalized prefix used in the Bioregistry is canonical.",
          "type": "string"
        },
        "twitter": {
          "title": "Twitter",
          "description": "The twitter handle for the project",
          "type": "string"
        },
        "miriam": {
          "title": "Miriam",
          "type": "object"
        },
        "n2t": {
          "title": "N2T",
          "type": "object"
        },
        "biocontext": {
          "title": "Biocontext",
          "type": "object"
        },
        "wikidata": {
          "title": "Wikidata",
          "type": "object"
        },
        "go": {
          "title": "Go",
          "type": "object"
        },
        "obofoundry": {
          "title": "Obofoundry",
          "type": "object"
        },
        "bioportal": {
          "title": "Bioportal",
          "type": "object"
        },
        "ols": {
          "title": "Ols",
          "type": "object"
        },
        "ncbi": {
          "title": "Ncbi",
          "type": "object"
        },
        "uniprot": {
          "title": "Uniprot",
          "type": "object"
        },
        "biolink": {
          "title": "Biolink",
          "type": "object"
        },
        "cellosaurus": {
          "title": "Cellosaurus",
          "type": "object"
        },
        "ontobee": {
          "title": "Ontobee",
          "type": "object"
        },
        "cheminf": {
          "title": "Cheminf",
          "type": "object"
        },
        "fairsharing": {
          "title": "Fairsharing",
          "type": "object"
        }
      },
      "required": [
        "prefix"
      ]
    },
    "RegistrySchema": {
      "title": "RegistrySchema",
      "description": "Metadata about a registry's schema.",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "homepage": {
          "title": "Homepage",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "description": {
          "title": "Description",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "example": {
          "title": "Example",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "pattern": {
          "title": "Pattern",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "provider": {
          "title": "Provider",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "alternate_providers": {
          "title": "Alternate Providers",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "synonyms": {
          "title": "Synonyms",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "license": {
          "title": "License",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "version": {
          "title": "Version",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "contact": {
          "title": "Contact",
          "enum": [
            "required",
            "required*",
            "present",
            "present*",
            "missing",
            "irrelevant",
            "irrelevant*"
          ],
          "type": "string"
        },
        "search": {
          "title": "Search",
          "description": "Does this resource have a search functionality for prefixes",
          "type": "boolean"
        },
        "fair": {
          "title": "Fair",
          "description": "Does this resource provide a structured dump of the data is easily findable, accessible, and in a structured format in bulk",
          "type": "boolean"
        },
        "fair_note": {
          "title": "Fair Note",
          "description": "Explanation for why data isn't FAIR",
          "type": "string"
        }
      },
      "required": [
        "name",
        "homepage",
        "description",
        "example",
        "pattern",
        "provider",
        "alternate_providers",
        "synonyms",
        "license",
        "version",
        "contact",
        "search",
        "fair"
      ]
    },
    "Registry": {
      "title": "Registry",
      "description": "Metadata about a registry.",
      "type": "object",
      "properties": {
        "prefix": {
          "title": "Prefix",
          "description": "The metaprefix for the registry itself. For example, the metaprefix for Identifiers.org is `miriam`.",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "description": "The human-readable label for the registry",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "A full description of the registry.",
          "type": "string"
        },
        "homepage": {
          "title": "Homepage",
          "description": "The URL for the homepage of the registry.",
          "type": "string"
        },
        "example": {
          "title": "Example",
          "description": "An example prefix inside the registry.",
          "type": "string"
        },
        "availability": {
          "title": "Availability",
          "description": "A structured description of the metadata that the registry collects",
          "allOf": [
            {
              "$ref": "#/definitions/RegistrySchema"
            }
          ]
        },
        "download": {
          "title": "Download",
          "description": "A download link for the data contained in the registry",
          "type": "string"
        },
        "provider_uri_format": {
          "title": "Provider Uri Format",
          "description": "A URL with a $1 for a prefix to resolve in the registry",
          "type": "string"
        },
        "resolver_uri_format": {
          "title": "Resolver Uri Format",
          "description": "A URL with a $1 for a prefix and $2 for an identifier to resolve in the registry",
          "type": "string"
        },
        "resolver_type": {
          "title": "Resolver Type",
          "description": "An optional type annotation for what kind of resolver it is (i.e., redirect or lookup)",
          "type": "string"
        },
        "contact": {
          "title": "Contact",
          "description": "The contact for the registry.",
          "allOf": [
            {
              "$ref": "#/definitions/Attributable"
            }
          ]
        },
        "bioregistry_prefix": {
          "title": "Bioregistry Prefix",
          "description": "The prefix for this registry in the Bioregistry",
          "type": "string"
        },
        "logo_url": {
          "title": "Logo Url",
          "description": "The URL for the logo of the resource",
          "type": "string"
        },
        "license": {
          "title": "License",
          "description": "The license under which the resource is redistributed",
          "type": "string"
        },
        "short_name": {
          "title": "Short Name",
          "description": "A short name for the resource, e.g., for use in charts",
          "type": "string"
        }
      },
      "required": [
        "prefix",
        "name",
        "description",
        "homepage",
        "example",
        "availability",
        "contact"
      ]
    },
    "Context": {
      "title": "Context",
      "description": "A prescriptive context contains configuration for generating fit-for-purpose\nprefix maps to serve various communities based on the standard Bioregistry\nprefix map, custom prefix remapping rules, custom URI prefix remapping rules,\ncustom prefix maps, and other community-specific logic.",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The name of the context",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "description": "A description of the context, can include Markdown",
          "type": "string"
        },
        "maintainers": {
          "title": "Maintainers",
          "description": "A list of maintainers for the context",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Author"
          }
        },
        "prefix_priority": {
          "title": "Prefix Priority",
          "description": "This ordering of metaprefixes (i.e., prefixes for registries) is used to determine the priority of which registry's prefixes are used. By default, the canonical Bioregistry prefixes are highest priority.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "include_synonyms": {
          "title": "Include Synonyms",
          "description": "Should synonyms be included in the prefix map?",
          "default": false,
          "type": "boolean"
        },
        "use_preferred": {
          "title": "Use Preferred",
          "description": "Should preferred prefixes (i.e., stylized prefixes) be preferred over canonicalized ones?",
          "default": false,
          "type": "boolean"
        },
        "uri_prefix_priority": {
          "title": "Uri Prefix Priority",
          "description": "This ordering of metaprefixes (i.e., prefixes for registries) is used to determine the priority of which registry's URI prefixes are used. By default, the canonical Bioregistry URI prefixes are highest priority.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prefix_remapping": {
          "title": "Prefix Remapping",
          "description": "This is a mapping from canonical Bioregistry prefixes to custom prefixes used in this context.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "custom_prefix_map": {
          "title": "Custom Prefix Map",
          "description": "This is a custom prefix map (which contains custom URL/URI expansions) that is added after all other logic is applied. Keys must either be canonical Bioregistry prefixes, prefixes used based on the given prefix priority, or values in the given prefix remapping.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "description",
        "maintainers",
        "prefix_priority",
        "uri_prefix_priority",
        "prefix_remapping",
        "custom_prefix_map"
      ]
    }
  }
}